const sourceFolderId = '変換前のGoogleドライブのパス';
const destFolderId = '変換後のGoogleドライブのパス';

function myFunction() {
    // Excelファイルが入っているフォルダをidによって取得
    const sourceFolder = DriveApp.getFolderById(sourceFolderId);
    // Excelファイルたちを変数に保存
    const excelFiles   = sourceFolder.getFiles();
    // 変換されたファイルが格納されるフォルダをidによって取得
    const destFolder   = DriveApp.getFolderById(destFolderId);
    // Excelファイルをイテレートして順にスプレッドシートに変換
    while(excelFiles.hasNext()) {
        var file = excelFiles.next();
        convertToSpreadsheet(file, destFolder);
    }
    delExcelFile(sourceFolder);
 }
 
//変換し登録するメソッド
function convertToSpreadsheet(file, destFolder) {
    // 各種オプションを設定
    // mimeTypeをスプレッドシートにすることで変換される
    options = {
        title: file.getName(),
        mimeType: MimeType.GOOGLE_SHEETS,
        parents: [{id: destFolder.getId()}]
    };
    // Drive APIへfileをPOSTする
    Drive.Files.insert(options, file.getBlob())
}

//変換後削除するメソッド
function delExcelFile(sourceFolder){
// const sourceFolder = DriveApp.getFolderById(sourceFolderId);デバッグ用
//myFunctionで取得しておいたファイルをすべて参照
  const delfiles = sourceFolder.getFiles();
  //参照済みのファイルがなくなるまでループ
  while(delfiles.hasNext()){
    //未参照のファイルを１つずつピックアップ
    const delfile = delfiles.next();
    //ピックアップしたファイルからファイルＩＤを参照
    const delId = delfile.getId();
//DriveAppクラスから上記で参照したファイルIDでファイル一意に取得する
    var delFileData = DriveApp.getFileById(delId);
//IDから取得したファイルをゴミ箱のフラグをtrueにする
     var getDelData = delFileData.setTrashed(true);
  }
}
